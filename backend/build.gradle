import org.apache.tools.ant.filters.ReplaceTokens

buildscript{
    ext {
        springBootVer = '3.2.1'
        querydslVer = '5.0.0'
        querydslPluginVer = '1.0.10'
        springDependencyMgmtVer = '1.1.4'
        springLoadedVer = '1.2.8'
//        nodePluginVer = '1.3.1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyMgmtVer}.RELEASE"
        classpath "org.springframework:springloaded:${springLoadedVer}.RELEASE"
//        classpath "com.github.node-gradle:gradle-node-plugin:3.1.0"
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVer}"
    id 'io.spring.dependency-management' version "${springDependencyMgmtVer}"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
//apply plugin: 'com.github.node-gradle.node'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url "https://repo.spring.io/libs-release" }
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
}

group = 'com.iandwe'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

//node {
//    download = true
//    version = '14.17.0'
//    // Set the work directory where node_modules should be located
//    nodeModulesDir = file("${project.projectDir}/../frontend")
//}

configurations {
    providedRuntime
}

//task webpack(type: NpmTask, dependsOn: 'npmInstall') {
//    args = ['run','build']
//}

// 여기 추가한 부분
tasks {
    processResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

// processResources is a Java task. Run the webpack bundling before this task using the 'build' task in the package.json
//processResources.dependsOn 'webpack'

//set build time and inject value to application.properties
static def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd_HHmm')
    return formattedDate
}

project.ext.set("build.date", buildTime())

processResources {
    with copySpec {
        from "src/main/resources"
        include "**/application*.yml"
        include "**/application*.yaml"
        include "**/application*.properties"
        project.properties.findAll().each {
            prop ->
                if (prop.value != null) {
                    filter(ReplaceTokens, tokens: [ (prop.key): String.valueOf(prop.value)])
                    filter(ReplaceTokens, tokens: [ ('project.' + prop.key): String.valueOf(prop.value)])
                    filter(ReplaceTokens, tokens: [ ('project.ext.' + prop.key): String.valueOf(prop.value)])
                }
        }
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-web")
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    runtimeOnly("com.mysql:mysql-connector-j")
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    implementation("org.springframework.boot:spring-boot-starter-websocket")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE")
    annotationProcessor("org.springframework.boot:spring-boot-starter-data-jpa")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    implementation('commons-io:commons-io:2.6')
    implementation("org.apache.commons:commons-collections4:4.4")
    implementation("org.apache.commons:commons-lang3:3.9")

    implementation("com.querydsl:querydsl-jpa:${querydslVer}:jakarta")
    implementation("com.querydsl:querydsl-apt:${querydslVer}:jakarta")


    //STOMP 웹소캣 서버 사이드 테스트를 위한 의존성 추가
    implementation("org.springframework.boot:spring-boot-starter-mustache")
    //STOMP 관련 프론트 라이브러리
    implementation('org.webjars.bower:jquery:3.3.1')
    implementation('org.webjars:sockjs-client:1.1.2')
    implementation('org.webjars:stomp-websocket:2.3.3-1')
    implementation('org.webjars:webjars-locator:0.30')
    //WebRTC 클라이언트 의존성 추가
    implementation('org.webjars.bower:webrtc-adapter:7.4.0')
    //Kurento (미디어서버) 관련 의존성 추가
    implementation('org.kurento:kurento-client:6.16.0')
    implementation('org.kurento:kurento-utils-js:6.15.0')


    //IntelliJ용
    //IntelliJ에서는 하기 annotationProcessor를 쓰면 별도의 querydsl 플러그인 및 플러그인 설정이 불필요.
    annotationProcessor("com.querydsl:querydsl-apt:${querydslVer}:jakarta")

    implementation("com.squareup.retrofit2:retrofit:2.7.1")
    implementation("com.squareup.retrofit2:converter-jackson:2.7.1")
//    implementation("com.squareup.okhttp3:logging-interceptor:3.9.0")

    implementation("com.google.guava:guava:29.0-jre")
    annotationProcessor("com.google.guava:guava:29.0-jre")

    testImplementation("com.jayway.jsonpath:json-path:2.4.0")

//    implementation("com.auth0:java-jwt:3.10.3")

//    implementation("io.springfox:springfox-swagger2:3.0.0")
//    implementation("io.springfox:springfox-swagger-ui:3.0.0")
//    implementation("io.springfox:springfox-data-rest:3.0.0")
//    implementation("io.springfox:springfox-bean-validators:3.0.0")
//    implementation("io.springfox:springfox-boot-starter:3.0.0")
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    implementation("jakarta.annotation:jakarta.annotation-api")

    implementation("org.projectlombok:lombok:1.18.20")
    annotationProcessor("org.projectlombok:lombok:1.18.20")
    testAnnotationProcessor('org.projectlombok:lombok')
    // ASM 라이브러리의 최신 버전
//    implementation 'org.ow2.asm:asm:9.2'

    // javax.persistence 의존성 추가
    implementation 'javax.persistence:javax.persistence-api:2.2'

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // json
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation group: 'org.json', name: 'json', version: '20231013'


    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    testImplementation 'org.springframework.security:spring-security-test'

    // redis
//    implementation group: 'org.springframework.data', name: 'spring-data-redis', version: '3.2.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // spring batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation group: 'org.springframework.batch', name: 'spring-batch-integration', version: '5.0.1'
    testImplementation 'org.springframework.batch:spring-batch-test'

    // spring mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // firebase
    implementation 'com.google.firebase:firebase-admin:9.1.1'

    // amazon s3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // gpt & webclient
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

}

test {
    useJUnitPlatform()
}